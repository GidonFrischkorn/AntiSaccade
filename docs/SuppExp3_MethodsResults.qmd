---
title: "Supplementary Experiment 3: Method & Results"
format: html
editor: visual
embed-resources: TRUE
editor_options: 
  chunk_output_type: console
---

```{r options, include = FALSE}
knitr::opts_chunk$set(
  eval = TRUE,
  echo = TRUE,
  output = TRUE,
  warning = FALSE,
  error = FALSE,
  message = FALSE,
  collapse = TRUE
)
```

```{r setup, include = FALSE}
pacman::p_load_gh("GidonFrischkorn/AntiSaccade")
pacman::p_load(papaja, brms, dplyr, ggplot2)
options(mc.cores = parallel::detectCores())

# plot settings
plot_dodge <- 1
jitter_width <- 1
point_alpha <- 0.1
```

# Methods

```{r load_data, include=FALSE}
data <- SuppExp3_data
nSub <- length(unique(data$ID))
data$CTI_num <- (data$CTI - min(data$CTI))/1000
data$CTI <- as.factor(data$CTI)
data$RTms <- data$RTms + 150
```

## Participants

We recruited `r papaja::printnum(nSub)` participant via Prolific. Participants were required to be 18 to 40 years old, speak English as their first language, and have an approval rate of at least 90% when participating in studies on Prolific.

## Design

In this study, we added a block without any block to the design of Experiment 4 to test if participants potentially just ignored the cue in Experiment 3.

## Manual Saccade Task

In this experiment we added a No Cue block compared to experiment 3. Additionally, we varied the CTI duration in three steps from 50, 200, to 400 ms. The fixation duration was again varied in 5 steps from 200 to 1800ms in steps of 400ms. Apart from that, the basic task and its instruction remained the same. So, participants indicated which letters they detected by pressing the according letter "P", "B", or "R" on the keyboard. We recorded the response given as well as the response time as the time between onset of the target stimulus until the response.

In each block we ran 240 trials. Thus, each of the three letters, appeared once in each of the four peripheral locations with each of the four fixation durations and five CTIs.

## Data Analysis

```{r include=FALSE}
n_full <- nrow(data)
data <- data %>% filter(RTms > 150, RTms < 10000)
n_filter <- nrow(data)

prop_filter <- (1 - n_filter/n_full) * 100
```

Prior to data analysis we removed trials with reaction times shorter than 50 ms and longer than 5000ms. This resulted in discarding `r papaja::printnum(prop_filter)`% of data.

We analyzed the number of correct responses with a Bayesian Generalized Linear Model assuming the number of correct responses to follow a binomial distribution. We used a logit link function, thus estimating the linear model on the logit-scale. The model was estimated using the R package `brms`.

```{r model_family}
model_family <- brmsfamily("binomial", link = "logit")
```

Specifically, we estimated the mean performance in each block at the shortest CTI duration as separate intercepts. We then included a linear CTI effect for each Block to estimate changes in performance as CTIs get longer. We included random effects for the intercepts and linear CTI effects in each Block without estimating the correlations between them:

```{r LinearModel}
linear_model <- bf(correct | trials(nTrials) ~ 
                     # fixed effects
                     0 + Block + Block:CTI_num + 
                     # random effects
                     (0 + Block + Block:CTI_num | ID))
```

For all parameters, we used moderately informative logistic priors centered on zero with a scale of one.

```{r Priors}
model_priors <- prior("logistic(0,1)", class = b)
```

We estimated parameter with four independent MCMC chains retaining 10000 samples for each chain after 2000 warmup samples:

```{r sampling_settings}
nChains <- 4
warmup_samples <- 2000
postwarmup_samples <- 10000
```

# Results

## Descriptives

```{r Agg_data, include=FALSE}
agg_data <- data |> 
  group_by(ID, Block, CTI_num) |> 
  summarise(correct = sum(correct), nTrials = n(), .groups = "drop")
```

```{r TableDesc, echo=FALSE, fig.align='center', out.width="80%"}
#| label: tbl-descriptivesCTI
#| tab-cap: "Desciptive statistiscs for the proportion correct in the different experimental conditions and each CTI condition."
table_data <- agg_data %>% 
  group_by(Block, CTI_num) %>% 
  summarise(Mean = mean(correct/nTrials),
            SD = sd(correct/nTrials),
            Min = min(correct/nTrials),
            Max = max(correct/nTrials),
            .groups = "drop") %>% 
  mutate(CTI_num = as.factor(round( (CTI_num + 0.05)*1000)))

names(table_data)[which(names(table_data) == "CTI_num")] <- "CTI"

knitr::kable(table_data, digits = 2)
```

The summary statistics for the Proportion of correct responses in the three different blocks for all CTI duration is given in \@ref(tab:TableDesc). Figure @fig-descriptivesCTI displays the changes of performance across the different conditions and includes performance of each subject in each of the conditions.

```{r FigDesc, echo=FALSE}
#| label: fig-descriptivesCTI
#| tab-cap: "Descriptive plots of the average performance and performance of each subject in each block across the different CTI durations"
plot_data <- data |> 
  group_by(ID, Block, CTI) |> 
  summarise(pC = sum(correct)/n(), .groups = "drop")

ggplot(data = plot_data,
       aes(x = CTI, y = pC, color = Block, group = Block)) +
  stat_summary(position = position_dodge(plot_dodge)) +
  stat_summary(geom = "line", fun = mean, position = position_dodge(plot_dodge)) +
  geom_jitter(alpha = point_alpha, position = position_jitterdodge(jitter.width = jitter_width, dodge.width = plot_dodge)) +
  labs(x = "Cue-Target Interval",
       y = "Proportion Correct",
       color = "Block", fill = "Block",
       shape = "Pos Cue = Target",
       title = "Descriptive Plot") +
  coord_cartesian(ylim = c(0,1)) +
  theme_bw() +
  theme(panel.grid.major.x = element_blank())
```

## GLM: Accuracy

```{r FitModel}
fit_SuppExp4_saturated <- brms::brm(linear_model,
                                    data = agg_data,
                                    family = model_family,
                                    backend = "cmdstanr",
                                    chains = nChains,
                                    iter = warmup_samples + postwarmup_samples, warmup = warmup_samples,
                                    prior = model_priors,
                                    save_pars = save_pars(all = T),
                                    sample_prior = T,
                                    file = "modelFits_SuppExp/fit_SuppExp3_saturated",
                                    file_refit = "on_change")

fit_SuppExp4_saturated_priors <- brms::brm(linear_model,
                                           data = agg_data,
                                           family = model_family,
                                           backend = "cmdstanr",
                                           chains = nChains,
                                           iter = warmup_samples + postwarmup_samples, warmup = warmup_samples,
                                           prior = model_priors,
                                           save_pars = save_pars(all = T),
                                           sample_prior = "only",
                                           file = "modelFits_SuppExp/fit_SuppExp3_saturated_priors",
                                           file_refit = "on_change")
```

```{r PredEffects, echo = FALSE}
#| label: fig-PredEffects
#| fig-cap: "Posterior predictives of the average proportion correct as a function of CTI duration in the three experimental blocks."
newdata <- expand.grid(
  ID = unique(fit_SuppExp4_saturated$data$ID),
  nTrials = 1,
  Block = unique(fit_SuppExp4_saturated$data$Block),
  CTI_num = unique(fit_SuppExp4_saturated$data$CTI_num)
)

tidy_pred_saturated <- fit_SuppExp4_saturated %>% 
  tidybayes::epred_draws(newdata = newdata, ndraws = 1000) %>% 
  group_by(ID, CTI_num, Block) %>% 
  summarise(predValue = mean(.epred)) %>% 
  mutate(CTI_num = (CTI_num + 0.05)*1000)

ggplot(data = tidy_pred_saturated,
       aes(y = predValue, x = as.factor(CTI_num), 
           color = as.factor(Block), group = as.factor(Block))) +
  geom_jitter(alpha = point_alpha, position = position_jitterdodge(jitter.width = jitter_width, dodge.width = plot_dodge)) +
  stat_summary(position = position_dodge(plot_dodge)) +
  stat_summary(geom = "line", fun = mean, position = position_dodge(plot_dodge)) +
  stat_summary(data = agg_data, aes(x = as.factor((CTI_num+0.05)*1000), y = correct/nTrials),
               geom = "point", fun = mean, position = position_dodge(plot_dodge), 
               color = "black", shape = "cross", size = 3) +
  geom_hline(yintercept = 1/3, color = "darkred", linetype = "dashed") +
  labs(x = "Cue-Target Interval (in ms)",
       y = "Proportion Correct",
       color = "Block", fill = "Block") +
  theme_bw() +
  theme(panel.grid.major.x = element_blank())
```

```{r Calc_BF, echo=FALSE}
CTI_effects <- emmeans::emtrends(fit_SuppExp4_saturated, ~ Block, var = "CTI_num")
Intercepts <- emmeans::emmeans(fit_SuppExp4_saturated, ~ Block, at = list(CTI_num = c(0)))

CTI_effects_prior <- emmeans::emtrends(fit_SuppExp4_saturated_priors, ~ Block, var = "CTI_num")
Intercepts_prior <- emmeans::emmeans(fit_SuppExp4_saturated_priors, ~ Block, at = list(CTI_num = c(0)))

BF_Int <- bayestestR::bayesfactor_parameters(pairs(Intercepts), prior = pairs(Intercepts_prior))
BF_CTI <- bayestestR::bayesfactor_parameters(pairs(CTI_effects), prior = pairs(CTI_effects_prior))

BF_Int$BF_Int <- exp(BF_Int$log_BF)
BF_CTI$BF_CTI <- exp(BF_CTI$log_BF)

BF_Int <- BF_Int[,c(1,3)]
BF_CTI <- BF_CTI[,c(1,3)]

BF_All <- merge(BF_Int,BF_CTI)
```

@fig-PredEffects shows the posterior predictive estimates from the Bayesian GLM for the different experimental blocks and the linear effect of CTI on the proportion correct scale. Comparisons of the posterior estimates (see @tbl-parameters and @tbl-BayesFactors) indicated that at the shortest CTI (50ms) performance in the Central3 Block was equal to the Central4 and Random block. There was moderate evidence for the performance in the No Saccade block being lower than in the Central3 block. Performance in the Central4 Block at the shortest CTI was better than in the Random and No Saccade Block. And performance at the shortest CTI did not differ between the Random and No Saccade Block.

For the CTI effects there was mostly evidence against them differing between blocks, except for the comparison between the No Cue and Random Cue Block, where there was inconclusive evidence.

```{r Table_Parameters, echo=FALSE}
#| label: tbl-parameters
#| tab-cap: "Overview of parameter estimates (on the logit scale) for the fixed and random effects in the Bayesian GLM."
fixFX <- fixef(fit_SuppExp4_saturated)
rownames(fixFX) <- stringr::str_remove(rownames(fixFX), "Block")
colnames(fixFX) <- stringr::str_replace(colnames(fixFX), "Estimate","Fixed Effect")

corr_est <- VarCorr(fit_SuppExp4_saturated)$ID
sdFX <- round(corr_est$sd,2)
row.names(sdFX) <- stringr::str_remove(row.names(sdFX),"Block")
colnames(sdFX) <- stringr::str_replace(colnames(sdFX), "Estimate","Random Effect")

allFX <- cbind(fixFX, sdFX)
knitr::kable(allFX[,c(1,3:5,7:8)], digits = 2)
```

```{r Table_BF, echo = FALSE}
#| label: tbl-BayesFactors
#| tbl-cap: "Bayes Factors for the pairwise comparisons of the intercepts and the CTI effects between the different experimental blocks."
knitr::kable(BF_All, digits = 2)
```
