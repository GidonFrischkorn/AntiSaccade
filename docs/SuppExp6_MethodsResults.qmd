---
title: "Supplementary Experiment 6: Method & Results"
format: html
editor: visual
embed-resources: TRUE
editor_options: 
  chunk_output_type: console
---

```{r options, include = FALSE}
knitr::opts_chunk$set(
  eval = TRUE,
  echo = FALSE,
  output = TRUE,
  warning = FALSE,
  error = FALSE,
  message = FALSE,
  collapse = TRUE
)
```

```{r setup, include = FALSE}
pacman::p_load(AntiSaccade, papaja, brms, dplyr, ggplot2)
options(mc.cores = parallel::detectCores())

# plot settings
plot_dodge <- 1
jitter_width <- 1
point_alpha <- 0.1
```

# Methods

```{r load_data, include=FALSE}
data <- SuppExp6_data
nSub <- length(unique(data$ID))
data$CTI_num <- (data$CTI - min(data$CTI))/1000
data$CTI <- as.factor(data$CTI)
data$RTms <- data$RTms + 150
```

```{r include=FALSE}
n_full <- nrow(data)
data <- data %>% filter(RTms > 150, RTms < 10000)
n_filter <- nrow(data)

prop_filter <- (1 - n_filter/n_full) * 100
```

```{r model_family}
model_family <- brmsfamily("binomial", link = "logit")
```

```{r LinearModel}
linear_model <- bf(correct | trials(nTrials) ~ 
                     # fixed effects
                     0 + Block + Block:CTI_num + 
                     # random effects
                     (0 + Block + Block:CTI_num || ID))
```

```{r Priors}
model_priors <- prior("logistic(0,1)", class = b)
```

```{r sampling_settings}
nChains <- 4
warmup_samples <- 2000
postwarmup_samples <- 10000
```

```{r Agg_data, include=FALSE}
agg_data <- data |> 
  group_by(ID, Block, CTI_num) |> 
  summarise(correct = sum(correct), nTrials = n(), .groups = "drop")
```

```{r TableDesc, echo=FALSE, fig.align='center', out.width="80%"}
#| label: tbl-descriptivesCTI
#| tab-cap: "Desciptive statistiscs for the proportion correct in the different experimental conditions and each CTI condition."
table_data <- agg_data %>% 
  group_by(Block, CTI_num) %>% 
  summarise(Mean = mean(correct/nTrials),
            SD = sd(correct/nTrials),
            Min = min(correct/nTrials),
            Max = max(correct/nTrials),
            .groups = "drop") %>% 
  mutate(CTI_num = as.factor(round( (CTI_num + 0.05)*1000)))

names(table_data)[which(names(table_data) == "CTI_num")] <- "CTI"

knitr::kable(table_data, digits = 2)
```

```{r FigDesc, echo=FALSE, fig.align='center', fig.height=4, fig.width=6, message=FALSE, warning=FALSE, fig.cap=""}
#| label: fig-descriptive
#| fig-cap: "Average performance in the three experimental conditions for each level of CTI duration."
plot_data <- data |> 
  group_by(ID, Block, CTI) |> 
  summarise(pC = sum(correct)/n(), .groups = "drop")

ggplot(data = plot_data,
       aes(x = CTI, y = pC, color = Block, group = Block)) +
  stat_summary(position = position_dodge(plot_dodge)) +
  stat_summary(geom = "line", fun = mean, position = position_dodge(plot_dodge)) +
  geom_jitter(alpha = point_alpha, position = position_jitterdodge(jitter.width = jitter_width, dodge.width = plot_dodge)) +
  labs(x = "Cue-Target Interval",
       y = "Proportion Correct",
       color = "Block", fill = "Block",
       shape = "Pos Cue = Target",
       title = "Descriptive Plot") +
  coord_cartesian(ylim = c(0,1)) +
  theme_bw() +
  theme(panel.grid.major.x = element_blank())
```

```{r FitModel, echo=FALSE}
fit_SuppExp6_saturated <- brms::brm(linear_model,
                          data = agg_data,
                          family = model_family,
                          backend = "cmdstanr",
                          chains = nChains,
                          iter = warmup_samples + postwarmup_samples, warmup = warmup_samples,
                          prior = model_priors,
                          save_pars = save_pars(all = T),
                          sample_prior = T,
                          file = "modelFits_SuppExp/fit_SuppExp6_saturated",
                          file_refit = "on_change")
```

```{r PredEffects}
#| label: fig-PredEffects
#| fig-cap: "Posterior predictives of the average proportion correct as a function of CTI duration in the three experimental blocks."
newdata <- expand.grid(
  ID = unique(fit_SuppExp6_saturated$data$ID),
  nTrials = 1,
  Block = unique(fit_SuppExp6_saturated$data$Block),
  CTI_num = unique(fit_SuppExp6_saturated$data$CTI_num)
)

tidy_pred_saturated <- fit_SuppExp6_saturated %>% 
  tidybayes::epred_draws(newdata = newdata, ndraws = 1000) %>% 
  group_by(ID, CTI_num, Block) %>% 
  summarise(predValue = mean(.epred)) %>% 
  mutate(CTI_num = (CTI_num + 0.05)*1000)

cond_plot <- plot(conditional_effects(fit_SuppExp6_saturated, effects = "CTI_num:Block", select_points = 0.1))[[1]]
cond_plot + 
  geom_hline(yintercept = 1/3, color = "darkred", linetype = "dashed") +
  geom_hline(yintercept = 1/2, color = "darkgreen", linetype = "dashed") +
  labs(x = "Cue-Target Interval (in ms)",
       y = "Proportion Correct",
       color = "Block", fill = "Block") +
  theme_bw() +
  theme(panel.grid.major.x = element_blank())

ggplot(data = tidy_pred_saturated,
       aes(y = predValue, x = as.factor(CTI_num), 
           color = as.factor(Block), group = as.factor(Block))) +
  geom_jitter(alpha = point_alpha, position = position_jitterdodge(jitter.width = jitter_width, dodge.width = plot_dodge)) +
  stat_summary(position = position_dodge(plot_dodge)) +
  stat_summary(geom = "line", fun = mean, position = position_dodge(plot_dodge)) +
  stat_summary(data = agg_data, aes(x = as.factor((CTI_num+0.05)*1000), y = correct/nTrials),
               geom = "point", fun = mean, position = position_dodge(plot_dodge), 
               color = "black", shape = "cross", size = 3) +
  geom_hline(yintercept = 1/3, color = "darkred", linetype = "dashed") +
  geom_hline(yintercept = 1/2, color = "darkgreen", linetype = "dashed") +
  labs(x = "Cue-Target Interval (in ms)",
       y = "Proportion Correct",
       color = "Block", fill = "Block") +
  theme_bw() +
  theme(panel.grid.major.x = element_blank())
```

```{r echo=FALSE}
hyp_fit <- c(Anti_Int = "BlockAnti = 0",
             Rand_Int = "BlockRandom = 0",
             Col_Int = "BlockColour = 0",
             Cen_Int = "BlockCentral = 0",
             CTI_Pro = "BlockPro:CTI_num = 0",
             CTI_Ant = "BlockAnti:CTI_num = 0",
             CTI_Ran = "BlockRandom:CTI_num = 0",
             CTI_Col = "BlockColour:CTI_num = 0",
             CTI_Rnd = "BlockRandom:CTI_num = 0",
             CTI_cent = "BlockCentral:CTI_num = 0",
             CTI_no = "BlockNo:CTI_num = 0")

hyp_results <- hypothesis(fit_SuppExp6_saturated,hyp_fit)
```

