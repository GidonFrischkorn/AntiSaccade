---
title: "Supplementary Experiment 1: Method & Results"
format: html
editor: visual
embed-resources: TRUE
editor_options: 
  chunk_output_type: console
---

```{r options, include = FALSE}
knitr::opts_chunk$set(
  eval = TRUE,
  echo = TRUE,
  output = TRUE,
  warning = FALSE,
  error = FALSE,
  message = FALSE,
  collapse = TRUE
)
```

```{r setup}
pacman::p_load_gh("GidonFrischkorn/AntiSaccade")
pacman::p_load(papaja, brms, dplyr, ggplot2)
options(mc.cores = parallel::detectCores())

# plot settings
plot_dodge <- 1
jitter_width <- 1
point_alpha <- 0.1
```

# Methods

```{r load_data}
data <- SuppExp1_data
nSub <- length(unique(data$ID))
```

## Participants

We recruited `r papaja::printnum(nSub)` participant via Prolific. Participants were required to be 18 to 40 years old, speak German as their first language, and have an approval rate of at least 90% when participating in studies on Prolific.

## Design

This supplementary experiment was part of a series of experiments that investigated which processes contribute to performance in the manual Anti-Saccade task. To do so, we compared three different task instructions distributed across three experimental blocks in a letter discrimination task. The three blocks were a Pro, Anti, and Random Saccade block. Details for the procedure in each of the blocks follows in the next section. Within these blocks we varied the interval between the spatially presented cue and the target from 50, to 100, and 200 milliseconds. The experimental design thus is a 3 (block) x 3 (cue-target interval) within subject design. The order of blocks was randomized across subjects. The random order was not included in the analysis.

## Manual Saccade Task

For this experiment, we adapted the Anti-Saccade task from Kane et al. (2001). Participants were instructed to identify which of three possible target letters, a "P", "B", or "R", appeared on the screen. The target appeared on one of four peripheral positions on the screen: top, right, bottom, or left. In each trial the target was presented for 100 ms, and was then masked with an "H" appearing for 50ms, and an "8" remaining on screen until the response. Preceding the target a cue appeared either at the same peripheral location (Pro-Saccade block), the opposite peripheral location (Anti-Saccade block), or at a random peripheral location different to the target location (Random-Saccade block). The cue consisted of a flashing "=". Specifically, after the trial started with a fixation cross being presented in the center of the screen for 200 to 1800 ms (varied in steps of 400 ms), the "=" appeared for 100ms, followed by it dissapperaring from the screen of 50ms, and then reappearing again for 100ms in the same location. The target stimulus then appeared after the offset of the second "=" depending on the cue-target interval implemented in the current trial: either 50, 100, or 200ms, after the offset of the "=" and then being masked as described above. See Fig. @fig-task below.

```{r figST}
#| label: fig-task
#| fig-cap: "Illustration of the procedure of one trial in the manual saccade task. The depicted trial is from an anti-saccade block."
knitr::include_graphics(path = "Figure_SaccadeTask.png")
```

To indicate which letters participants detected they were asked to press the according letter "P", "B", or "R" on the keyboard. We recorded the response given as well as the response time as the time between onset of the target stimulus until the response.

In each block we ran 180 trials. Thus, each of the three letters, appeared once in each of the four peripheral locations with each of the 5 fixation durations and three CTIs.

## Data Analysis

```{r}
data$CTI_num <- (data$CTI - min(data$CTI))/1000
data$CTI <- as.factor(data$CTI)

data$RTms <- data$RTms + 150

n_full <- nrow(data)
data <- data %>% filter(RTms > 150, RTms < 10000)
n_filter <- nrow(data)

prop_filter <- (1 - n_filter/n_full) * 100
```

Prior to data analysis we removed trials with reaction times shorter than 50 ms and longer than 10000ms. This resulted in discarding `r papaja::printnum(prop_filter)`% of data.

We analyzed the number of correct responses with a Bayesian Generalized Linear Model assuming the number of correct responses to follow a binomial distribution. We used a logit link function, thus estimating the linear model on the logit-scale. The model was estimated using the R package `brms`.

```{r model_family}
model_family <- brmsfamily("binomial", link = "logit")
```

Specifically, we estimated the mean performance in each block at the shortest CTI duration as separate intercepts. We then included a linear CTI effect for each Block to estimate changes in performance as CTIs get longer. We included random effects for the intercepts and linear CTI effects in each Block without estimating the correlations between them:

```{r LinearModel}
linear_model <- bf(correct | trials(nTrials) ~ 
                     # fixed effects
                     0 + Block + Block:CTI_num + 
                     # random effects
                     (0 + Block + Block:CTI_num | ID))
```

For all parameters, we used moderately informative logistic priors centered on zero with a scale of one. The CTI variable was centered on the shortest CTI duration and divided by 1000, thus the CTI effect represents changes in performance for a CTI change of a second.

```{r Priors}
model_priors <- prior("logistic(0,1)", class = b)
```

We estimated parameters with four independent MCMC chains retaining 10000 samples for each chain after 2000 warm-up samples:

```{r sampling_settings}
nChains <- 4
warmup_samples <- 2000
postwarmup_samples <- 10000
```

# Results

## Descriptives

```{r Agg_data}
agg_data <- data |> 
  group_by(ID, Block, CTI_num) |> 
  summarise(correct = sum(correct), nTrials = n(), .groups = "drop")
```

```{r TableDesc}
#| label: tbl-descriptivesCTI
#| tab-cap: "Desciptive statistiscs for the proportion correct in the different experimental conditions and each CTI condition."
table_data <- agg_data %>% 
  group_by(Block, CTI_num) %>% 
  summarise(Mean = mean(correct/nTrials),
            SD = sd(correct/nTrials),
            Min = min(correct/nTrials),
            Max = max(correct/nTrials),
            .groups = "drop") %>% 
  mutate(CTI_num = as.factor(round( (CTI_num + 0.05)*1000)))

names(table_data)[which(names(table_data) == "CTI_num")] <- "CTI"

knitr::kable(table_data, digits = 2)
```

The summary statistics for the proportion of correct responses in the three different blocks for all CTI duration is given in @tbl-descriptivesCTI Figure @fig-descriptive displays the changes of performance across the different conditions and includes performance of each subject in each of the conditions.

```{r FigDesc}
#| label: fig-descriptive
#| fig-cap: "Average performance in the three experimental conditions for each level of CTI duration."
plot_data <- data |> 
  group_by(ID, Block, CTI) |> 
  summarise(pC = sum(correct)/n(), .groups = "drop")

ggplot(data = plot_data,
       aes(x = CTI, y = pC, color = Block, group = Block)) +
  stat_summary(position = position_dodge(plot_dodge)) +
  stat_summary(geom = "line", fun = mean, position = position_dodge(plot_dodge)) +
  geom_jitter(alpha = point_alpha, position = position_jitterdodge(jitter.width = jitter_width, dodge.width = plot_dodge)) +
  labs(x = "Cue-Target Interval",
       y = "Proportion Correct",
       color = "Block", fill = "Block",
       shape = "Pos Cue = Target",
       title = "Descriptive Plot") +
  coord_cartesian(ylim = c(0,1)) +
  theme_bw() +
  theme(panel.grid.major.x = element_blank())
```

## GLM: Accuracy

```{r FitModel, echo=FALSE}
#| label: fig-PredEffects
#| fig-cap: "Posterior predictives of the average proportion correct as a function of CTI duration in the three experimental blocks."
fit_SuppExp1_saturated <- brms::brm(linear_model,
                          data = agg_data,
                          family = model_family,
                          backend = "cmdstanr",
                          chains = nChains,
                          iter = warmup_samples + postwarmup_samples, warmup = warmup_samples,
                          prior = model_priors,
                          save_pars = save_pars(all = T),
                          sample_prior = T,
                          file = "modelFits_SuppExp/fit_SuppExp1_saturated",
                          file_refit = "on_change")

newdata <- expand.grid(
  ID = unique(fit_SuppExp1_saturated$data$ID),
  nTrials = 1,
  Block = unique(fit_SuppExp1_saturated$data$Block),
  CTI_num = unique(fit_SuppExp1_saturated$data$CTI_num)
)

tidy_pred_saturated <- fit_SuppExp1_saturated %>% 
  tidybayes::epred_draws(newdata = newdata, ndraws = 1000) %>% 
  group_by(ID, CTI_num, Block) %>% 
  summarise(predValue = mean(.epred)) %>% 
  mutate(CTI_num = (CTI_num + 0.5)*1000)

ggplot(data = tidy_pred_saturated,
       aes(y = predValue, x = as.factor(CTI_num), 
           color = as.factor(Block), group = as.factor(Block))) +
  geom_jitter(alpha = point_alpha, position = position_jitterdodge(jitter.width = jitter_width, dodge.width = plot_dodge)) +
  stat_summary(position = position_dodge(plot_dodge)) +
  stat_summary(geom = "line", fun = mean, position = position_dodge(plot_dodge)) +
  stat_summary(data = agg_data, aes(x = as.factor((CTI_num+0.5)*1000), y = correct/nTrials),
               geom = "point", fun = mean, position = position_dodge(plot_dodge), 
               color = "black", shape = "cross", size = 3) +
  geom_hline(yintercept = 1/3, color = "darkred", linetype = "dashed") +
  labs(x = "Cue-Target Interval (in ms)",
       y = "Proportion Correct",
       color = "Block", fill = "Block") +
  theme_bw()
```

```{r echo=FALSE}
hyp_fit <- c(Pro_Ant = "BlockPro = BlockAnti",
             Pro_Ran = "BlockPro = BlockRandom",
             Ran_Ant = "BlockRandom = BlockAnti",
             CTI_Pro = "BlockPro:CTI_num = 0",
             CTI_Ant = "BlockAnti:CTI_num = 0",
             CTI_Ran = "BlockRandom:CTI_num = 0",
             CTI_P2A = "BlockPro:CTI_num = BlockAnti:CTI_num",
             CTI_P2R = "BlockPro:CTI_num = BlockRandom:CTI_num",
             CTI_R2A = "BlockRandom:CTI_num = BlockAnti:CTI_num")

hyp_results <- hypothesis(fit_SuppExp1_saturated,hyp_fit)
```

@fig-PredEffects shows the posterior predictive estimates from the Bayesian GLM for the different experimental blocks and the linear effect of CTI on the proportion correct scale. Comparisons of the posterior estimates (see @tbl-parameters) indicated that at the shortest CTI (50ms) performance in the Pro-Saccade Block was better than in both the Anti-Saccade, $BF_{10}$ = `r printnum(abs(1/hyp_results$hypothesis$Evid.Ratio[1]), format = "e")`, and the Random-Saccade block, , $BF_{10}$ = `r printnum(abs(1/hyp_results$hypothesis$Evid.Ratio[2]), format = "e")`. Although descriptively performance in the Anti-Saccade block was lower than in the Random-Saccade Block, there was inconclusive evidence with respect to performance being different in these two blocks at the shortest CTI condition, $BF_{01}$ = `r printnum(abs(hyp_results$hypothesis$Evid.Ratio[3]), format = "e")`.

For both the Pro-Saccade, $BF_{10}$ = `r printnum(abs(1/hyp_results$hypothesis$Evid.Ratio[4]), format = "e")`, and the Anti-Saccade Block, $BF_{10}$ = `r printnum(abs(1/hyp_results$hypothesis$Evid.Ratio[5]), format = "g")`, there was strong evidence in favor of a linear effect of CTI, leading to better performance for longer CTIs. For the Random-Saccade Block there was moderate evidence in favor of an effect of CTI on performance, $BF_{10}$ = `r printnum(abs(1/hyp_results$hypothesis$Evid.Ratio[6]), format = "e")`.

The CTI effect was larger in the Anti-Saccade Block than in the Random-Saccade block,  $BF_{10}$ = `r printnum(abs(1/hyp_results$hypothesis$Evid.Ratio[9]), format = "e")`, but there was no conclusive evidence with respect to the difference of the CTI effect between the Anti- and Pro-Saccade Block, $BF_{10}$ = `r printnum(abs(1/hyp_results$hypothesis$Evid.Ratio[7]), format = "e")`. Likewise there was inconclusive evidenve with respect to the difference between the CTI effect in the Pro- and Random-Saccade block, $BF_{10}$ = `r printnum(abs(1/hyp_results$hypothesis$Evid.Ratio[8]), format = "e")`.

```{r Table_Parameters}
#| label: tbl-parameters
#| tab-cap: "Overview of parameter estimates (on the logit scale) for the fixed and random effects in the Bayesian GLM."
fixFX <- fixef(fit_SuppExp1_saturated)
rownames(fixFX) <- stringr::str_remove(rownames(fixFX), "Block")
colnames(fixFX) <- stringr::str_replace(colnames(fixFX), "Estimate","Fixed Effect")

corr_est <- VarCorr(fit_SuppExp1_saturated)$ID
sdFX <- round(corr_est$sd,2)
row.names(sdFX) <- stringr::str_remove(row.names(sdFX),"Block")
colnames(sdFX) <- stringr::str_replace(colnames(sdFX), "Estimate","Random Effect")

allFX <- cbind(fixFX, sdFX)
knitr::kable(allFX[,c(1,3:5,7:8)], digits = 2)
```
